package com.abnamro.demo.grpc.client;
import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;
import io.grpc.StatusRuntimeException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.abn_amro.grpc.MessageServiceGrpc;
import com.abn_amro.grpc.Request;
import com.abn_amro.grpc.Response;

public class MessageClient {

	private static final Logger logger = Logger.getLogger(MessageClient.class.getName());

    private final ManagedChannel channel;
    private final MessageServiceGrpc.MessageServiceBlockingStub blockingStub;
	
    
    public MessageClient(String host, int port) {
        this(ManagedChannelBuilder.forAddress(host, port)
            // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid
            // needing certificates.
            .usePlaintext(true)
            .build());
      }
    
    MessageClient(ManagedChannel channel) {
        this.channel = channel;
        blockingStub = MessageServiceGrpc.newBlockingStub(channel);
      }
    
    public void shutdown() throws InterruptedException {
        channel.shutdown().awaitTermination(5, TimeUnit.SECONDS);
      }
    public void check(String name, String role) {
       
        Request request = Request.newBuilder().setName(name).setRole(role).build();
        Response response;
        try {
          response = blockingStub.getMessage(request);
        } catch (StatusRuntimeException e) {
          logger.log(Level.WARNING, "RPC failed: {0}", e.getStatus());
          return;
        }
        logger.info("The department: " + response.getDepartment());
      }
	public static void main(String[] args) throws InterruptedException {
		MessageClient client = new MessageClient("192.168.99.100", 50051);
		    try {
		      /* Access a service running on the local machine on port 50051 */
		      String name = "Mozes";
		      String role = "developer";
//		      if (args.length > 0) {
//		    	  name = args[0]; 
//		    	  role = args[1];
//		      }
		      client.check(name,role);
		    } finally {
		      client.shutdown();
		    }
	}

}
